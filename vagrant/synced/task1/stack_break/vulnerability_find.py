import subprocess as subp
import re

program = ''

known_vuln_c_functions = {
    'memcpy': [r'\w+\s+<__x86.get_pc_thunk.ax>', '80488ec'],
    'strcat': [r'\w+\s+<strcat@plt>', '8048200'],
    'strcpy': [r'\w+\s+<strcpy@plt>', '80481d0'],
    'strncat': [r'\W+\s+<strncat@plt>', '8048220'], 
    'strncpy': [r'\w+\s+<strncpy@plt>', '8048210']
}

def getFunctions():
    cmd = ['objdump', '-d']
    cmd.append(program)

    dumpProcess = subp.run(cmd, stdout=subp.PIPE, stderr=subp.PIPE)
    dumpOut = dumpProcess.stdout.decode()

    funcPat = r'[0-9A-Fa-f]{8}\s+<(\w.+?)>\.?' # function name
    funcPat += r'(.*?)\n\n' # function body
    funcPat = re.compile(funcPat, re.DOTALL)
    funcs = funcPat.findall(dumpOut)

    std_c_funcs = open('std_c_functions', 'r').readlines()
    std_c_funcs = [f.strip('\n') for f in std_c_funcs]

    usrDefFuncs = []
    for f in funcs:
        if f[0] not in std_c_funcs:
            usrDefFuncs.append(f)

    vulnFuncs = []
    for f in usrDefFuncs:
        name = f[0]
        body = f[1]

        if name in std_c_funcs: continue
        
        appended = False
        for c_func in known_vuln_c_functions.keys():
            if appended: break
            for call_opr in known_vuln_c_functions[c_func]:
                vulnCallPat = r'call\s+' + call_opr
                vulnCallPat = re.compile(vulnCallPat, re.MULTILINE)
                match = vulnCallPat.search(body)
                if match and name not in vulnFuncs:
                    vulnFuncs.append(name)
                    appended = True
                    break

    return vulnFuncs

def getBPoints(func):
    cmd = ['gdb', '--batch']
    cmd.extend(['--ex', 'run'])
    cmd.extend(['--ex', 'disassemble ' + func])
    cmd.extend([program])

    gdbProcess = subp.run(cmd, stdout=subp.PIPE, stderr=subp.PIPE)
    gdbOut = gdbProcess.stdout.decode()
    
    retAddPat = r'\s*(0x\w{8}).*' # address of instruction
    retAddPat += r'(?=\n.*ret)' # before ret
    retAddPat = re.compile(retAddPat, re.MULTILINE)
    bPoints = retAddPat.findall(gdbOut)

    return bPoints
