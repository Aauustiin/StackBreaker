import subprocess as subp
import re
import os

from typing import List
from typing import Tuple
from pathlib import Path

program:Path

known_vuln_c_functions = {
    # 'memcpy': [r'\w+\s+<__x86.get_pc_thunk.ax>', '80488ec'],
    'strcat': [r'\w+\s+<strcat@plt>', '0x8048200'],
    'strcpy': [r'\w+\s+<strcpy@plt>', '0x80481d0'],
    'strncat': [r'\W+\s+<strncat@plt>', '0x8048220'], 
    'strncpy': [r'\w+\s+<strncpy@plt>', '0x8048210']
}

def getFunctions() -> List[str]:
    cmd = ['objdump', '-d']
    cmd.append(program)

    dumpProcess = subp.run(cmd, stdout=subp.PIPE, stderr=subp.PIPE)
    dumpOut = dumpProcess.stdout.decode()

    funcPat = r'[0-9A-Fa-f]{8}\s+<(\w+)>\.?' # function name
    funcPat = re.compile(funcPat, re.DOTALL)
    funcs = funcPat.findall(dumpOut)

    std_c_funcs = open( os.path.dirname(__file__) + '/std_c_functions', 'r').readlines()
    std_c_funcs = [f.strip('\n') for f in std_c_funcs]

    usrDefFuncs = []
    for f in funcs:
        if f not in std_c_funcs:
            usrDefFuncs.append(f)

    return usrDefFuncs

def findVulnerabilities(funcs: List[str]) -> tuple[list[str], list[str]]:
    cmd = ['gdb', '--batch']
    cmd.extend(['--ex'])

    vulnAddrs = []
    vulnFuncs = []
    for f in funcs:
        new_cmd = cmd.copy()
        new_cmd.extend(['disassemble ' + f, program])

        gdbProcess = subp.run(new_cmd, stdout=subp.PIPE, stderr=subp.PIPE)
        gdbOut = gdbProcess.stdout.decode()

        for c_func in known_vuln_c_functions.keys():
            for call_opr in known_vuln_c_functions[c_func]:
                vulnPat = r'^\s+(0x[0-9A-Fa-f]{8}).*call\s+' + call_opr
                vulnPat = re.compile(vulnPat, re.MULTILINE)
                matches = vulnPat.findall(gdbOut)
                vulnAddrs.extend(matches)
                if len(matches) > 0: 
                    if f not in vulnFuncs: vulnFuncs.append(f)
                    break

    return vulnFuncs, vulnAddrs

def getEntryAddr(run=False) -> int:
    cmd = ['gdb', '--batch']
    if run: cmd.extend(['--ex', 'run'])
    cmd.extend(['--ex', 'disassemble _start', program])

    gdbProcess = subp.run(cmd, stdout=subp.PIPE, stderr=subp.PIPE)
    gdbOut = gdbProcess.stdout.decode()

    entryAddPat = r'^\s+(0x[0-9A-Fa-f]{8})'
    entryAddPat = re.compile(entryAddPat, re.MULTILINE)
    entryAddr = entryAddPat.search(gdbOut).group(0)
    entryAddr = int(entryAddr, 0)
    
    return entryAddr

def getBPoints(func: str) -> List[str]:
    cmd = ['gdb', '--batch']
    cmd.extend(['--ex', 'run'])
    cmd.extend(['--ex', 'disassemble ' + func])
    cmd.extend([program])

    gdbProcess = subp.run(cmd, stdout=subp.PIPE, stderr=subp.PIPE)
    gdbOut = gdbProcess.stdout.decode()
    
    retAddPat = r'\s*(0x\w{8}).*' # address of instruction
    retAddPat += r'(?=\n.*ret)' # before ret
    retAddPat = re.compile(retAddPat, re.MULTILINE)
    bPoints = retAddPat.findall(gdbOut)

    return bPoints
